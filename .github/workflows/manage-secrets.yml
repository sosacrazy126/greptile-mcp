# Cloudflare Workers Secret Management Workflow
#
# This workflow helps manage secrets and environment variables for the Greptile MCP Server
# deployed on Cloudflare Workers. It provides secure rotation and updates of sensitive data.
#
# Features:
# - Secure secret rotation for API keys and tokens
# - Environment-specific secret management
# - Validation of secret formats before deployment
# - Audit logging for secret operations
# - Emergency secret rotation procedures

name: 🔐 Manage Cloudflare Secrets

on:
  # Manual trigger for secret management operations
  workflow_dispatch:
    inputs:
      operation:
        description: 'Secret management operation'
        required: true
        type: choice
        options:
          - rotate-greptile-keys
          - rotate-github-tokens
          - rotate-all-secrets
          - validate-secrets
          - list-secrets
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - both
      emergency:
        description: 'Emergency rotation (skip validations)'
        required: false
        default: false
        type: boolean

  # Scheduled secret validation (weekly)
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC

# Set permissions for secret management
permissions:
  contents: read
  actions: write
  issues: write

# Global environment variables
env:
  WRANGLER_VERSION: '3.80.0'

jobs:
  # ==========================================
  # JOB 1: Secret Validation
  # ==========================================
  validate-secrets:
    name: 🔍 Validate Secrets
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.operation == 'validate-secrets' || 
      github.event.inputs.operation == 'list-secrets' ||
      github.event_name == 'schedule'
    
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
      secrets-list: ${{ steps.list-secrets.outputs.secrets }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.5'
          cache: 'npm'

      - name: 📦 Install Wrangler
        run: |
          npm install -g wrangler@${{ env.WRANGLER_VERSION }}
          wrangler --version

      - name: 🔍 List Current Secrets
        id: list-secrets
        run: |
          echo "::group::Listing Staging Secrets"
          staging_secrets=$(wrangler secret list --env staging --format json 2>/dev/null || echo "[]")
          echo "Staging secrets:"
          echo "$staging_secrets" | jq .
          echo "::endgroup::"
          
          echo "::group::Listing Production Secrets"
          production_secrets=$(wrangler secret list --env production --format json 2>/dev/null || echo "[]")
          echo "Production secrets:"
          echo "$production_secrets" | jq .
          echo "::endgroup::"
          
          # Combine and output for other jobs
          combined_secrets=$(jq -n \
            --argjson staging "$staging_secrets" \
            --argjson production "$production_secrets" \
            '{staging: $staging, production: $production}')
          
          echo "secrets=$combined_secrets" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: ✅ Validate Secret Formats
        id: validate
        run: |
          echo "::group::Validating Secret Formats"
          
          validation_passed=true
          
          # Validate Greptile API keys format
          if [[ ! "${{ secrets.GREPTILE_API_KEY_STAGING }}" =~ ^[a-zA-Z0-9_-]{20,}$ ]]; then
            echo "❌ Invalid GREPTILE_API_KEY_STAGING format"
            validation_passed=false
          else
            echo "✅ GREPTILE_API_KEY_STAGING format valid"
          fi
          
          if [[ ! "${{ secrets.GREPTILE_API_KEY_PRODUCTION }}" =~ ^[a-zA-Z0-9_-]{20,}$ ]]; then
            echo "❌ Invalid GREPTILE_API_KEY_PRODUCTION format"
            validation_passed=false
          else
            echo "✅ GREPTILE_API_KEY_PRODUCTION format valid"
          fi
          
          # Validate GitHub tokens format
          if [[ ! "${{ secrets.GITHUB_TOKEN_STAGING }}" =~ ^gh[pousr]_[a-zA-Z0-9]{36,}$ ]]; then
            echo "❌ Invalid GITHUB_TOKEN_STAGING format"
            validation_passed=false
          else
            echo "✅ GITHUB_TOKEN_STAGING format valid"
          fi
          
          if [[ ! "${{ secrets.GITHUB_TOKEN_PRODUCTION }}" =~ ^gh[pousr]_[a-zA-Z0-9]{36,}$ ]]; then
            echo "❌ Invalid GITHUB_TOKEN_PRODUCTION format"  
            validation_passed=false
          else
            echo "✅ GITHUB_TOKEN_PRODUCTION format valid"
          fi
          
          if [ "$validation_passed" = true ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ All secret validations passed"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Secret validation failed"
          fi
          
          echo "::endgroup::"

      - name: 📊 Generate Validation Report  
        run: |
          echo "## 🔐 Secret Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.validate.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display secret counts
          secrets_json='${{ steps.list-secrets.outputs.secrets }}'
          staging_count=$(echo "$secrets_json" | jq '.staging | length')
          production_count=$(echo "$secrets_json" | jq '.production | length')
          
          echo "### Secret Counts" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: $staging_count secrets" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: $production_count secrets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Required Secrets Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.validate.outputs.status }}" = "passed" ]; then
            echo "✅ All required secrets are present and valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some secrets are missing or invalid" >> $GITHUB_STEP_SUMMARY
          fi

  # ==========================================
  # JOB 2: Rotate Greptile API Keys
  # ==========================================
  rotate-greptile-keys:
    name: 🔄 Rotate Greptile API Keys
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.operation == 'rotate-greptile-keys' || 
      github.event.inputs.operation == 'rotate-all-secrets'
    
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.5'
          cache: 'npm'

      - name: 📦 Install Wrangler
        run: |
          npm install -g wrangler@${{ env.WRANGLER_VERSION }}
          wrangler --version

      - name: 🔄 Rotate Staging Greptile Key
        if: |
          github.event.inputs.environment == 'staging' || 
          github.event.inputs.environment == 'both'
        run: |
          echo "::group::Rotating Staging Greptile API Key"
          
          # Backup current key (last 4 characters for identification)
          current_key="${{ secrets.GREPTILE_API_KEY_STAGING }}"
          backup_suffix="${current_key: -4}"
          echo "Previous key suffix: ***$backup_suffix"
          
          # Set new key
          echo "${{ secrets.GREPTILE_API_KEY_STAGING }}" | wrangler secret put GREPTILE_API_KEY --env staging
          
          echo "✅ Staging Greptile API key rotated successfully"
          echo "::endgroup::"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: 🔄 Rotate Production Greptile Key
        if: |
          github.event.inputs.environment == 'production' || 
          github.event.inputs.environment == 'both'
        run: |
          echo "::group::Rotating Production Greptile API Key"
          
          # Backup current key (last 4 characters for identification)
          current_key="${{ secrets.GREPTILE_API_KEY_PRODUCTION }}"
          backup_suffix="${current_key: -4}"
          echo "Previous key suffix: ***$backup_suffix"
          
          # Set new key
          echo "${{ secrets.GREPTILE_API_KEY_PRODUCTION }}" | wrangler secret put GREPTILE_API_KEY --env production
          
          echo "✅ Production Greptile API key rotated successfully"
          echo "::endgroup::"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: 🧪 Test Key Rotation
        if: github.event.inputs.emergency != 'true'
        run: |
          echo "::group::Testing Key Rotation"
          
          # Wait for propagation
          echo "Waiting 30 seconds for key propagation..."
          sleep 30
          
          # Test staging if rotated
          if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "Testing staging deployment..."
            staging_health=$(curl -s https://greptile-mcp-server-staging.workers.dev/health || echo "failed")
            if echo "$staging_health" | jq -e '.status == "healthy"' > /dev/null 2>&1; then
              echo "✅ Staging deployment healthy after key rotation"
            else
              echo "⚠️  Staging deployment may need restart after key rotation"
            fi
          fi
          
          # Test production if rotated  
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "Testing production deployment..."
            production_health=$(curl -s https://greptile-mcp-server.workers.dev/health || echo "failed")
            if echo "$production_health" | jq -e '.status == "healthy"' > /dev/null 2>&1; then
              echo "✅ Production deployment healthy after key rotation"
            else
              echo "⚠️  Production deployment may need restart after key rotation"
            fi
          fi
          
          echo "::endgroup::"

  # ==========================================
  # JOB 3: Rotate GitHub Tokens
  # ==========================================
  rotate-github-tokens:
    name: 🔄 Rotate GitHub Tokens
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.operation == 'rotate-github-tokens' || 
      github.event.inputs.operation == 'rotate-all-secrets'
    
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.5'
          cache: 'npm'

      - name: 📦 Install Wrangler
        run: |
          npm install -g wrangler@${{ env.WRANGLER_VERSION }}
          wrangler --version

      - name: 🔄 Rotate Staging GitHub Token
        if: |
          github.event.inputs.environment == 'staging' || 
          github.event.inputs.environment == 'both'
        run: |
          echo "::group::Rotating Staging GitHub Token"
          
          # Set new token
          echo "${{ secrets.GITHUB_TOKEN_STAGING }}" | wrangler secret put GITHUB_TOKEN --env staging
          
          echo "✅ Staging GitHub token rotated successfully"
          echo "::endgroup::"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: 🔄 Rotate Production GitHub Token
        if: |
          github.event.inputs.environment == 'production' || 
          github.event.inputs.environment == 'both'
        run: |
          echo "::group::Rotating Production GitHub Token"
          
          # Set new token
          echo "${{ secrets.GITHUB_TOKEN_PRODUCTION }}" | wrangler secret put GITHUB_TOKEN --env production
          
          echo "✅ Production GitHub token rotated successfully"
          echo "::endgroup::"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # ==========================================
  # JOB 4: Notification and Audit
  # ==========================================
  audit-and-notify:
    name: 📋 Audit & Notify
    runs-on: ubuntu-latest
    needs: [validate-secrets, rotate-greptile-keys, rotate-github-tokens]
    if: always()
    
    steps:
      - name: 📋 Generate Audit Log
        run: |
          echo "::group::Secret Management Audit Log"
          
          echo "## 🔐 Secret Management Audit Log" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Operation**: ${{ github.event.inputs.operation || 'scheduled-validation' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Emergency**: ${{ github.event.inputs.emergency || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job results
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate-secrets.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Greptile Key Rotation**: ${{ needs.rotate-greptile-keys.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Token Rotation**: ${{ needs.rotate-github-tokens.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Validation status
          if [ "${{ needs.validate-secrets.outputs.validation-status }}" = "passed" ]; then
            echo "✅ **Validation Status**: All secrets are valid" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-secrets.outputs.validation-status }}" = "failed" ]; then
            echo "❌ **Validation Status**: Some secrets need attention" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Validation Status**: Not performed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Automated secret management from GitHub Actions*" >> $GITHUB_STEP_SUMMARY
          
          echo "::endgroup::"

      - name: 🚨 Create Issue on Validation Failure
        if: |
          needs.validate-secrets.outputs.validation-status == 'failed' ||
          needs.rotate-greptile-keys.result == 'failure' ||
          needs.rotate-github-tokens.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔐 Secret Management Alert - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Secret Management Alert
            
            **Date**: ${new Date().toISOString()}
            **Triggered by**: ${{ github.actor }}
            **Operation**: ${{ github.event.inputs.operation || 'scheduled-validation' }}
            
            ### Issues Detected
            
            ${{ needs.validate-secrets.outputs.validation-status == 'failed' && '❌ Secret validation failed - some secrets are invalid or missing' || '' }}
            ${{ needs.rotate-greptile-keys.result == 'failure' && '❌ Greptile API key rotation failed' || '' }}
            ${{ needs.rotate-github-tokens.result == 'failure' && '❌ GitHub token rotation failed' || '' }}
            
            ### Required Actions
            
            1. Review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error messages
            2. Verify all required secrets are set in repository settings
            3. Ensure secret formats match the expected patterns
            4. Consider manual secret rotation if automated rotation failed
            
            ### Secret Requirements
            
            #### GitHub Repository Secrets
            - \`CLOUDFLARE_API_TOKEN\`: Cloudflare API token with Workers:Edit permissions
            - \`CLOUDFLARE_ACCOUNT_ID\`: Your Cloudflare account ID
            - \`GREPTILE_API_KEY_STAGING\`: Greptile API key for staging environment
            - \`GREPTILE_API_KEY_PRODUCTION\`: Greptile API key for production environment
            - \`GITHUB_TOKEN_STAGING\`: GitHub token for staging environment
            - \`GITHUB_TOKEN_PRODUCTION\`: GitHub token for production environment
            
            ---
            *This issue was automatically created by the secret management workflow.*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automation', 'secrets']
            });

# ==========================================
# Workflow Documentation
# ==========================================
#
# ## Secret Management Operations
#
# ### Available Operations
#
# 1. **validate-secrets**: Validate format and presence of all required secrets
# 2. **rotate-greptile-keys**: Rotate Greptile API keys in specified environment(s)
# 3. **rotate-github-tokens**: Rotate GitHub tokens in specified environment(s)  
# 4. **rotate-all-secrets**: Rotate all secrets in specified environment(s)
# 5. **list-secrets**: List current secrets (names only, not values)
#
# ### Manual Execution
#
# ```bash
# # Validate all secrets
# gh workflow run manage-secrets.yml -f operation=validate-secrets
#
# # Rotate Greptile keys in staging
# gh workflow run manage-secrets.yml \
#   -f operation=rotate-greptile-keys \
#   -f environment=staging
#
# # Emergency rotation of all secrets in production
# gh workflow run manage-secrets.yml \
#   -f operation=rotate-all-secrets \
#   -f environment=production \
#   -f emergency=true
# ```
#
# ### Scheduled Operations
#
# - **Weekly validation**: Every Monday at 2 AM UTC
# - Automatic issue creation on validation failures
#
# ## Security Considerations
#
# 1. **Secret Rotation**: Regular rotation helps maintain security
# 2. **Format Validation**: Ensures secrets meet expected patterns
# 3. **Environment Isolation**: Staging and production secrets are managed separately
# 4. **Audit Trail**: All operations are logged with timestamps and actors
# 5. **Emergency Procedures**: Skip validations for urgent rotations
#
# ## Troubleshooting
#
# ### Common Issues
#
# 1. **Invalid Secret Format**: Check that secrets match expected patterns
# 2. **Cloudflare Auth Failure**: Verify CLOUDFLARE_API_TOKEN has Workers:Edit permissions
# 3. **Deployment Health Issues**: Secrets may need time to propagate (up to 60 seconds)
#
# ### Recovery Procedures
#
# 1. **Failed Rotation**: Re-run with emergency=true to skip validations
# 2. **Invalid Secrets**: Update repository secrets and re-validate
# 3. **Deployment Issues**: Check Cloudflare Workers dashboard and logs
#
# ==========================================