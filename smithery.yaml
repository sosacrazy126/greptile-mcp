name: greptile-mcp
version: 3.0.0
description: Modern TypeScript MCP server for AI-powered code search and querying with Greptile API

# Server metadata
author: Greptile MCP Team
license: MIT
homepage: https://github.com/sosacrazy126/greptile-mcp
repository: https://github.com/sosacrazy126/greptile-mcp.git

# Runtime configuration
runtime:
  node_version: "18"
  build_command: "npm run build"
  start_command: "node dist/server.js"
  
# Environment variables
environment:
  GREPTILE_API_KEY:
    description: "Your Greptile API key from app.greptile.com/settings/api"
    required: true
    secret: true
  GITHUB_TOKEN:
    description: "GitHub personal access token with repo permissions"
    required: true  
    secret: true
  GREPTILE_BASE_URL:
    description: "Base URL for Greptile API"
    default: "https://api.greptile.com/v2"
    required: false
  TRANSPORT:
    description: "Transport method (sse or stdio)"
    default: "stdio"
    required: false
  HOST:
    description: "Host binding for SSE transport"
    default: "0.0.0.0"
    required: false
  PORT:
    description: "Port for SSE transport"
    default: "8080"
    required: false

# MCP server configuration
mcp:
  transport: stdio
  capabilities:
    tools: true
    resources: true
    prompts: true
  tools:
    - name: greptile_help
      description: Get comprehensive help and usage examples for all Greptile MCP tools
    - name: index_repository
      description: Index a repository to make it searchable for future queries
    - name: query_repository
      description: Query repositories using natural language to get detailed answers with code references
    - name: get_repository_info
      description: Get information about an indexed repository including status and metadata

# Health checks
health:
  path: "/health"
  timeout: 10
  retries: 3

# Resource requirements
resources:
  memory: "512Mi"
  cpu: "0.5"
  disk: "1Gi"

# Scaling
scaling:
  min_instances: 1
  max_instances: 3
  target_cpu_utilization: 70

# Logging
logging:
  level: "info"
  format: "json"

# Tags and categories
tags:
  - mcp
  - greptile
  - code-search
  - ai
  - typescript
  - repository-analysis

categories:
  - Developer Tools
  - AI/ML
  - Code Analysis

# Installation requirements
requirements:
  - node_modules installed via npm
  - TypeScript compilation
  - Environment variables configured

# Documentation
documentation:
  setup: |
    1. Get your Greptile API key from https://app.greptile.com/settings/api
    2. Generate a GitHub token at https://github.com/settings/tokens with 'repo' permissions
    3. Set the required environment variables
    4. The server will start automatically on deployment
  
  usage: |
    The server provides 4 MCP tools for AI-powered code analysis:
    - greptile_help: Get documentation
    - index_repository: Index repositories for search
    - query_repository: Ask natural language questions about code
    - get_repository_info: Check indexing status
  
  examples: |
    # Index a repository
    {"name": "index_repository", "arguments": {"remote": "github", "repository": "microsoft/vscode", "branch": "main"}}
    
    # Query the codebase
    {"name": "query_repository", "arguments": {"query": "How is authentication implemented?", "repositories": [{"remote": "github", "repository": "microsoft/vscode", "branch": "main"}]}}

# Deployment settings
deployment:
  timeout: 300
  zero_downtime: true
  rollback_on_failure: true